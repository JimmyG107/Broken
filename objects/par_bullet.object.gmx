<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recalculate Image
//image_angle = arctan2(spd_y, spd_x) * 180 / pi;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit Walls
if(place_meeting(x + spd_x, y + spd_y, par_obstacle))   //if moving this turn would put it inside a wall
{
    if(reflect)
    {
        if(place_meeting(x + spd_x, y, par_obstacle))
        {
            show_debug_message("initial x = " + string(x));
            show_debug_message("initial x_spd = " + string(spd_x));
            show_debug_message("distance_to_object = " + string(distance_to_object(par_obstacle)));
            show_debug_message("change in x = " + string((2 * distance_to_object(par_obstacle) * sign(spd_x)) - spd_x));
            x += (2 * distance_to_object(par_obstacle) * sign(spd_x)) - spd_x;
            spd_x *= -1;
            show_debug_message("final x = " + string(x));
        }
        else
        {
            x += spd_x;
        }
        if(place_meeting(x, y + spd_y, par_obstacle))
        {
            y += 2 * distance_to_object(par_obstacle) * sign(spd_x) - spd_x;
            spd_y *= -1;
        }
        else
        {
            y += spd_y;
        }
    }
    else
    {
        instance_destroy();
    }
}
else
{
    x += spd_x;
    y += spd_y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit Walls
if(place_meeting(x + spd_x, y + spd_y, par_obstacle))   //if moving this turn would put it inside a wall
{
    if(reflect)
    {
        if(place_meeting(x + spd_x, y, par_obstacle))
        {
            show_debug_message("initial x = " + string(x));
            show_debug_message("initial x_spd = " + string(spd_x));
            show_debug_message("distance_to_object = " + string(distance_to_object(par_obstacle)));
            show_debug_message("change in x = " + string((2 * distance_to_object(par_obstacle) * sign(spd_x)) - spd_x));
            x += (2 * distance_to_object(par_obstacle) * sign(spd_x)) - spd_x;
            spd_x *= -1;
            show_debug_message("final x = " + string(x));
        }
        else
        {
            x += spd_x;
        }
        if(place_meeting(x, y + spd_y, par_obstacle))
        {
            y += 2 * distance_to_object(par_obstacle) * sign(spd_x) - spd_x;
            spd_y *= -1;
        }
        else
        {
            y += spd_y;
        }
    }
    else
    {
        instance_destroy();
    }
}
else
{
    x += spd_x;
    y += spd_y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recalculate Image
//image_angle = arctan2(spd_y, spd_x) * 180 / pi;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
