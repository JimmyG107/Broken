<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//scale is initialized in each weapon
active = false;
depth = -5;
player = false; //true if owned by player, false if owned by enemy
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect Buttons and Clicks
/*lMouse = mouse_check_button(mb_left);
lMousePressed = mouse_check_button_pressed(mb_left);
lMouseReleased = mouse_check_button_released(mb_left);

rMouse = mouse_check_button(mb_right);
rMousePressed = mouse_check_button_pressed(mb_right);
rMouseReleased = mouse_check_button_released(mb_right);

mMouse = mouse_check_button(mb_middle);
mMousePressed = mouse_check_button_pressed(mb_middle);
mMouseReleased = mouse_check_button_released(mb_middle);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Image
if(player)
{
    image_angle = point_direction(x, y, mouse_x, mouse_y);
}
else
{
    image_angle = point_direction(x, y, obj_character.x, obj_character.y);
}

if(image_angle &gt; 90 &amp;&amp; image_angle &lt;= 270)
{
    image_yscale = -1 * scale;
}
else
{
    image_yscale = 1 * scale;
}
image_xscale = scale;
//x = obj_blob.x// + distance_from_center * cos(degtorad(image_angle));
//y = obj_blob.y// + distance_from_center * -sin(degtorad(image_angle));

barrel_position_x = x + (sprite_width + -sprite_get_xoffset(sprite_index)) * cos(degtorad(image_angle));
barrel_position_y = y + (sprite_width + -sprite_get_xoffset(sprite_index)) * -sin(degtorad(image_angle));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
